/**
 * @module @semaphore-protocol/hardhat
 * @version 0.1.0
 * @file A Semaphore Hardhat plugin to deploy verifiers and Semaphore contract.
 * @copyright Ethereum Foundation 2022
 * @license MIT
 * @see [Github]{@link https://github.com/semaphore-protocol/semaphore/tree/main/packages/hardhat}
*/
'use strict';

var config = require('hardhat/config');
require('hardhat-dependency-compiler');
require('@nomiclabs/hardhat-ethers');
var circomlibjs = require('circomlibjs');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

config.task("deploy:semaphore", "Deploy a Semaphore contract")
    .addParam("verifiers", "Tree depths and verifier addresses", [], config.types.json)
    .addOptionalParam("logs", "Print the logs", true, config.types.boolean)
    .setAction(function (_a, _b) {
    var logs = _a.logs, verifiers = _a.verifiers;
    var ethers = _b.ethers;
    return __awaiter(void 0, void 0, void 0, function () {
        var poseidonABI, poseidonBytecode, signer, PoseidonLibFactory, poseidonLib, IncrementalBinaryTreeLibFactory, incrementalBinaryTreeLib, SemaphoreContractFactory, semaphoreContract;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    poseidonABI = circomlibjs.poseidon_gencontract.generateABI(2);
                    poseidonBytecode = circomlibjs.poseidon_gencontract.createCode(2);
                    return [4 /*yield*/, ethers.getSigners()];
                case 1:
                    signer = (_c.sent())[0];
                    PoseidonLibFactory = new ethers.ContractFactory(poseidonABI, poseidonBytecode, signer);
                    return [4 /*yield*/, PoseidonLibFactory.deploy()];
                case 2:
                    poseidonLib = _c.sent();
                    return [4 /*yield*/, poseidonLib.deployed()];
                case 3:
                    _c.sent();
                    if (logs) {
                        console.info("Poseidon library has been deployed to: ".concat(poseidonLib.address));
                    }
                    return [4 /*yield*/, ethers.getContractFactory("IncrementalBinaryTree", {
                            libraries: {
                                PoseidonT3: poseidonLib.address
                            }
                        })];
                case 4:
                    IncrementalBinaryTreeLibFactory = _c.sent();
                    return [4 /*yield*/, IncrementalBinaryTreeLibFactory.deploy()];
                case 5:
                    incrementalBinaryTreeLib = _c.sent();
                    return [4 /*yield*/, incrementalBinaryTreeLib.deployed()];
                case 6:
                    _c.sent();
                    if (logs) {
                        console.info("IncrementalBinaryTree library has been deployed to: ".concat(incrementalBinaryTreeLib.address));
                    }
                    return [4 /*yield*/, ethers.getContractFactory("Semaphore", {
                            libraries: {
                                IncrementalBinaryTree: incrementalBinaryTreeLib.address
                            }
                        })];
                case 7:
                    SemaphoreContractFactory = _c.sent();
                    return [4 /*yield*/, SemaphoreContractFactory.deploy(verifiers)];
                case 8:
                    semaphoreContract = _c.sent();
                    return [4 /*yield*/, semaphoreContract.deployed()];
                case 9:
                    _c.sent();
                    if (logs) {
                        console.info("Semaphore contract has been deployed to: ".concat(semaphoreContract.address));
                    }
                    return [2 /*return*/, semaphoreContract];
            }
        });
    });
});

config.task("deploy:verifier", "Deploy a Verifier contract")
    .addParam("merkleTreeDepth", "Merkle tree depth", undefined, config.types.int)
    .addOptionalParam("logs", "Print the logs", true, config.types.boolean)
    .setAction(function (_a, _b) {
    var merkleTreeDepth = _a.merkleTreeDepth, logs = _a.logs;
    var ethers = _b.ethers;
    return __awaiter(void 0, void 0, void 0, function () {
        var VerifierContractFactory, verifierContract;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, ethers.getContractFactory("Verifier".concat(merkleTreeDepth))];
                case 1:
                    VerifierContractFactory = _c.sent();
                    return [4 /*yield*/, VerifierContractFactory.deploy()];
                case 2:
                    verifierContract = _c.sent();
                    return [4 /*yield*/, verifierContract.deployed()];
                case 3:
                    _c.sent();
                    if (logs) {
                        console.info("Verifier".concat(merkleTreeDepth, " contract has been deployed to: ").concat(verifierContract.address));
                    }
                    return [2 /*return*/, verifierContract];
            }
        });
    });
});

config.extendConfig(function (config, userConfig) {
    var _a;
    config.dependencyCompiler.paths = [
        "@semaphore-protocol/contracts/verifiers/Verifier16.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier17.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier18.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier19.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier20.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier21.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier22.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier23.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier24.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier25.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier26.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier27.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier28.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier29.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier30.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier31.sol",
        "@semaphore-protocol/contracts/verifiers/Verifier32.sol",
        "@semaphore-protocol/contracts/Semaphore.sol"
    ];
    if ((_a = userConfig.dependencyCompiler) === null || _a === void 0 ? void 0 : _a.paths) {
        config.dependencyCompiler.paths = __spreadArray(__spreadArray([], config.dependencyCompiler.paths, true), userConfig.dependencyCompiler.paths, true);
    }
});
